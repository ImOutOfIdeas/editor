!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jonat/Documents/dev/cpp/editor/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(EXE)	Makefile	/^$(EXE): $(SRCS)$/;"	t
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -std=c11$/;"	m
EDITOR_H	src/editor.h	/^#define EDITOR_H$/;"	d
EXE	Makefile	/^EXE = editor$/;"	m
INPUT	Makefile	/^INPUT = test.txt$/;"	m
LINKEDLINES_H	src/linkedLines.h	/^#define LINKEDLINES_H$/;"	d
LineNode	src/linkedLines.h	/^struct LineNode {$/;"	s
MAX_LINE_LENGTH	src/linkedLines.h	/^#define MAX_LINE_LENGTH /;"	d
SRCS	Makefile	/^SRCS = $(wildcard $(SRC_DIR)\/*.c)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
TERMCONTROLLER_H	src/termController.h	/^#define TERMCONTROLLER_H$/;"	d
TermSize	src/termController.h	/^struct TermSize {$/;"	s
all	Makefile	/^all: $(EXE)$/;"	t
appendLineNode	src/linkedLines.c	/^void appendLineNode(struct LineNode** head, struct LineNode* newNode) {$/;"	f	typeref:typename:void
c	src/editor.c	/^static char c;                              \/\/ Stores currently pressed character$/;"	v	typeref:typename:char	file:
clean	Makefile	/^clean:$/;"	t
clear	src/termController.c	/^void clear(){$/;"	f	typeref:typename:void
col	src/editor.c	/^static int row = 1, col = 1;                \/\/ Current cursor position$/;"	v	typeref:typename:int	file:
cookTerm	src/editor.c	/^void cookTerm(struct LineNode** head) {$/;"	f	typeref:typename:void
createLinkedList	src/linkedLines.c	/^int createLinkedList(struct LineNode** head, const char* fName) {$/;"	f	typeref:typename:int
createNode	src/linkedLines.c	/^struct LineNode* createNode(char* data) {$/;"	f	typeref:struct:LineNode *
data	src/linkedLines.h	/^    char* data;$/;"	m	struct:LineNode	typeref:typename:char *
deleteLetter	src/linkedLines.c	/^void deleteLetter(struct LineNode* head, int n, int i) {$/;"	f	typeref:typename:void
disableRawMode	src/termController.c	/^int disableRawMode() {$/;"	f	typeref:typename:int
editorLoop	src/editor.c	/^void editorLoop(struct LineNode** head) {$/;"	f	typeref:typename:void
enableRawMode	src/termController.c	/^int enableRawMode() {$/;"	f	typeref:typename:int
freeList	src/linkedLines.c	/^void freeList(struct LineNode* head) {$/;"	f	typeref:typename:void
getCursorPosition	src/termController.c	/^int getCursorPosition(int *rows, int *cols) {$/;"	f	typeref:typename:int
getWindowSize	src/termController.c	/^void getWindowSize(struct TermSize *ts) {$/;"	f	typeref:typename:void
height	src/termController.h	/^    int height;$/;"	m	struct:TermSize	typeref:typename:int
insertLetter	src/linkedLines.c	/^void insertLetter(struct LineNode* head, char c, int n, int i) {$/;"	f	typeref:typename:void
insertLineNode	src/linkedLines.c	/^void insertLineNode(struct LineNode** head, struct LineNode* newNode, int index) {$/;"	f	typeref:typename:void
insertMode	src/editor.c	/^void insertMode(struct LineNode* head) {$/;"	f	typeref:typename:void
lineLength	src/linkedLines.c	/^int lineLength(struct LineNode* head, int n) {$/;"	f	typeref:typename:int
lineLength	src/linkedLines.h	/^int lineLength(struct LineNode* head, int n) {$/;"	f	typeref:typename:int
main	src/main.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
next	src/linkedLines.h	/^    struct LineNode* next;$/;"	m	struct:LineNode	typeref:struct:LineNode *
normalMode	src/editor.c	/^void normalMode(struct LineNode** head) {$/;"	f	typeref:typename:void
prependLineNode	src/linkedLines.c	/^void prependLineNode(struct LineNode** head, struct LineNode* newNode) {$/;"	f	typeref:typename:void
printList	src/linkedLines.c	/^void printList(struct LineNode* head) {$/;"	f	typeref:typename:void
restoreScreen	src/termController.c	/^void restoreScreen() {$/;"	f	typeref:typename:void
row	src/editor.c	/^static int row = 1, col = 1;                \/\/ Current cursor position$/;"	v	typeref:typename:int	file:
saveScreen	src/termController.c	/^void saveScreen() {$/;"	f	typeref:typename:void
setCursorPosition	src/termController.c	/^void setCursorPosition(int row, int col) {$/;"	f	typeref:typename:void
term	src/termController.c	/^struct termios term;$/;"	v	typeref:struct:termios
ts	src/editor.c	/^static struct TermSize* ts = NULL;          \/\/ Struct for terminal dimensions$/;"	v	typeref:struct:TermSize *	file:
uncookTerm	src/editor.c	/^void uncookTerm(struct LineNode** head, char* fName) {$/;"	f	typeref:typename:void
width	src/termController.h	/^    int width;$/;"	m	struct:TermSize	typeref:typename:int
